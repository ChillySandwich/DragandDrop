[{"C:\\Users\\leejona3\\Desktop\\TestProject2\\testapp\\src\\index.js":"1","C:\\Users\\leejona3\\Desktop\\TestProject2\\testapp\\src\\App.js":"2","C:\\Users\\leejona3\\Desktop\\TestProject2\\testapp\\src\\reportWebVitals.js":"3","C:\\Users\\leejona3\\Desktop\\TestProject2\\testapp\\src\\Components\\Hazard.js":"4","C:\\Users\\leejona3\\Desktop\\TestProject2\\testapp\\src\\Components\\SideContainer.js":"5","C:\\Users\\leejona3\\Desktop\\TestProject2\\testapp\\src\\Components\\ImageContainer.js":"6","C:\\Users\\leejona3\\Desktop\\TestProject2\\testapp\\src\\Components\\Layout.js":"7","C:\\Users\\leejona3\\Desktop\\TestProject2\\testapp\\src\\Components\\Hazards.js":"8","C:\\Users\\leejona3\\Desktop\\TestProject2\\testapp\\src\\Components\\ColoredRect.js":"9"},{"size":478,"mtime":1612559557328,"results":"10","hashOfConfig":"11"},{"size":14557,"mtime":1612776093072,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":2530,"mtime":1612242739447,"results":"14","hashOfConfig":"11"},{"size":262,"mtime":1612243006264,"results":"15","hashOfConfig":"11"},{"size":301,"mtime":1612678378083,"results":"16","hashOfConfig":"11"},{"size":1076,"mtime":1612242737685,"results":"17","hashOfConfig":"11"},{"size":2102,"mtime":1612242869216,"results":"18","hashOfConfig":"11"},{"size":2283,"mtime":1612483463106,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"13rjrnv",{"filePath":"23","messages":"24","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},"C:\\Users\\leejona3\\Desktop\\TestProject2\\testapp\\src\\index.js",[],["45","46"],"C:\\Users\\leejona3\\Desktop\\TestProject2\\testapp\\src\\App.js",["47","48","49","50","51","52","53","54","55","56"],"C:\\Users\\leejona3\\Desktop\\TestProject2\\testapp\\src\\reportWebVitals.js",[],"C:\\Users\\leejona3\\Desktop\\TestProject2\\testapp\\src\\Components\\Hazard.js",["57","58"],"import React from 'react';\r\nimport Draggable from 'react-draggable';\r\nimport { FaTimes } from 'react-icons/fa';\r\nimport {useState} from 'react';\r\n\r\nexport const Hazard = ({ hazard, onDelete, target }) => {\r\n    const [show, setShow] = useState(false);\r\n\r\n    // Is valid drag target verifies that the drag finish coordinates are within the map location\r\n    const isValidDragTarget = (x, y) => {\r\n        console.log('[INFO] .isValidDragTarget');\r\n\r\n        console.log(JSON.stringify(target));\r\n        console.log(x);\r\n        console.log(y);\r\n        // This is where you will add the check against the target box\r\n        if (x >= target.xMin && x <= target.xMax\r\n            && y >= target.yMin && y <= target.yMax) {\r\n            // ---------------------------\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // On drag start function\r\n    // -> Event handler for start of drag event\r\n    const onDragStart = (event, data) => {\r\n        // ---------------------------------\r\n        // Note: this should print a mouse-up event\r\n        console.log(event);\r\n        // This prints the data associated with the drag event\r\n        // In particular, where the drag started in pixels and where it finished\r\n        console.log(data);\r\n\r\n\r\n    }\r\n\r\n    // On drag stop function\r\n    // -> Event handler for end of drag event\r\n    const onDragFinish = (event, data) => {\r\n        // ---------------------------------\r\n        // Note: this should print a mouse-up event\r\n        console.log(event);\r\n        // This prints the data associated with the drag event\r\n        // In particular, where the drag started in pixels and where it finished\r\n        console.log(data);\r\n        console.log(event.clientX, ' ', event.clientY);\r\n\r\n        // Check if drag finish is within map area - if so, we can add the hazard to the list\r\n        let isValidDrag = isValidDragTarget(data.x, data.y);\r\n        console.log(isValidDrag);\r\n    } \r\n\r\n    console.log(`Hazard target: ${JSON.stringify(target)}`);\r\n    \r\n    return (\r\n        \r\n        <div>\r\n            <div> {hazard.text}  </div>\r\n            <Draggable \r\n                grid={[15, 15]}\r\n                onStart={onDragStart}\r\n                onStop={onDragFinish}\r\n            >\r\n            <div> {hazard.image}\r\n            <FaTimes style = {{color: 'red', cursor: 'pointer', height:'10px', width:'10px'}}  onClick={() => onDelete(hazard.id)}/></div>\r\n            </Draggable>\r\n           \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Hazard;\r\n\r\n",["59","60"],"C:\\Users\\leejona3\\Desktop\\TestProject2\\testapp\\src\\Components\\SideContainer.js",[],"C:\\Users\\leejona3\\Desktop\\TestProject2\\testapp\\src\\Components\\ImageContainer.js",["61"],"\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport SiteImg from './Site.JPG';\r\n\r\nexport const ImageContainer = (props) => {\r\n\r\n    return (\r\n        <>\r\n            <img src ={SiteImg} style={{maxWidth: '100%', maxHeight:'100%'}} alt=\"SitePlan\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ImageContainer;\r\n;","C:\\Users\\leejona3\\Desktop\\TestProject2\\testapp\\src\\Components\\Layout.js",["62"],"import React from 'react';\r\nimport SideContainer from \"./SideContainer\";\r\nimport ImageContainer from \"./ImageContainer\";\r\nimport Hazard from \"./Hazard\";\r\nimport Hazards from \"./Hazards\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { useState } from 'react';\r\n\r\nconst DEFAULT_TARGET_STATE = { xMin: 0, xMax: 0, yMin: 0, yMax: 0 };\r\n\r\nconst Layout = (props) => {\r\n    const [target, setTarget] = useState(DEFAULT_TARGET_STATE);\r\n\r\n\r\n    return (\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={4}>\r\n                <SideContainer>\r\n                    <Hazards target={target} ></Hazards>\r\n                    {console.log(\"This is the hazard list from the other page\" + props.showHaz)}\r\n                    \r\n                </SideContainer>\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n                <ImageContainer setTarget={setTarget} />\r\n            </Grid>\r\n            <input type='button' value=\"Selected Hazards\" onClick={() => console.log(this.props.data.showHaz)}/>\r\n        </Grid>\r\n        \r\n    );\r\n}\r\n\r\nexport default Layout;","C:\\Users\\leejona3\\Desktop\\TestProject2\\testapp\\src\\Components\\Hazards.js",["63","64","65","66","67","68"],"import Hazard from './Hazard'\r\nimport { useState } from 'react'\r\n\r\n\r\n//array of the actual value of the state, and function to update the value\r\nconst initialHazardList = [];\r\n\r\nconst Hazards = (props) => {\r\n    // const [userHazardList, setUserHazardList] = useState(initialHazardList);\r\n    // This below can be a constant (NOT STATE -> it does not change in the lifecycle of your component)\r\n    console.log('HazardList from other page' + props.showHaz);\r\n    \r\n    const [hazards, setHazards] = useState([\r\n        {\r\n            id: 1,\r\n            text: 'Traffic Cone',\r\n            image: <img style={{ height: '20px', width: '20px' }} src=\"https://tinyurl.com/y6a5xw69\"></img>,\r\n        },\r\n        {\r\n            id: 2,\r\n            text: 'Forklift',\r\n            image: <img style={{ height: '40px', width: '40px' }} img src=\"https://tinyurl.com/y3aef9kt\"></img>,\r\n        },\r\n        {\r\n            id: 3,\r\n            text: 'Racking',\r\n            image: <img style={{ height: '40px', width: '60px' }} img src=\"https://tinyurl.com/y67vdnmu\"></img>,\r\n        },\r\n        {\r\n            id: 4,\r\n            text: 'Truck',\r\n            image: <img style={{ height: '40px', width: '50px' }} img src=\"https://tinyurl.com/y3rxt7hh\"></img>,\r\n        },\r\n        {\r\n            id: 5,\r\n            text: 'Pedestrian Zone',\r\n            image: <img style={{ height: '40px', width: '40px' }} img src='https://tinyurl.com/y27hc3ut'></img>\r\n\r\n        }\r\n    ])\r\n\r\n    const deleteHazard = (id) => {\r\n        setHazards(hazards.filter((hazard) => hazard.id !== id))\r\n    }\r\n\r\n    // setHazards(prev => prev.concat((props.hazardList)));\r\n\r\n    \r\n\r\n    console.log(`Hazards Props: ${JSON.stringify(props)}`);\r\n\r\n    return (\r\n        //setTasks\r\n        <>\r\n            {hazards.map((hazard) => (\r\n                <Hazard\r\n                    key={hazard.id}\r\n                    hazard={hazard}\r\n                    onDelete={deleteHazard}\r\n                    target={props.target}\r\n                    // setHazard={setHazards}\r\n                />))}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Hazards;","C:\\Users\\leejona3\\Desktop\\TestProject2\\testapp\\src\\Components\\ColoredRect.js",["69","70","71"],"import React, { Component } from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { Stage, Layer, Rect, Text } from \"react-konva\";\r\nimport Konva from \"konva\";\r\n\r\nexport default class ColoredRect extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { color: \"green\", rects: [] };\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.setState({\r\n      color: Konva.Util.getRandomColor()\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <Stage\r\n        width={window.innerWidth}\r\n        height={window.innerHeight}\r\n        ref=\"stageReference\"\r\n      >\r\n        <Layer>\r\n          <Rect\r\n            ref=\"draggableRectReference\"\r\n            x={20}\r\n            y={20}\r\n            width={50}\r\n            height={50}\r\n            fill={this.state.color}\r\n            shadowBlur={5}\r\n            onClick={this.handleClick}\r\n            draggable={true}\r\n            onDragEnd={() => {\r\n              var draggableRect = this.refs.draggableRectReference;\r\n              /* adding a new rect in in state, no need to call draw() or anything\r\n              because updating state triggers render() again */\r\n              this.setState({\r\n                rects: [\r\n                  ...this.state.rects,\r\n                  {\r\n                    x: draggableRect.getStage().getPointerPosition().x,\r\n                    y: draggableRect.getStage().getPointerPosition().y,\r\n                    width: 50,\r\n                    height: 50,\r\n                    fill: \"green\",\r\n                    draggable: true\r\n                  }\r\n                ]\r\n              });\r\n              //returning draggable rect to original position\r\n              draggableRect.position({ x: 20, y: 20 });\r\n              this.refs.stageReference.draw(); // or draggableRect.getStage().draw()\r\n            }}\r\n          />\r\n        </Layer>\r\n        <Layer>\r\n          {this.state.rects.map(eachRect => {\r\n            return (\r\n              <Rect\r\n                x={eachRect.x}\r\n                y={eachRect.y}\r\n                width={eachRect.width}\r\n                height={eachRect.height}\r\n                fill={eachRect.fill}\r\n                draggable={eachRect.draggable}\r\n              />\r\n            );\r\n          })}\r\n        </Layer>\r\n      </Stage>\r\n    );\r\n  }\r\n}",{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":1,"column":17,"nodeType":"78","messageId":"79","endLine":1,"endColumn":26},{"ruleId":"76","severity":1,"message":"80","line":1,"column":28,"nodeType":"78","messageId":"79","endLine":1,"endColumn":37},{"ruleId":"76","severity":1,"message":"81","line":2,"column":30,"nodeType":"78","messageId":"79","endLine":2,"endColumn":34},{"ruleId":"76","severity":1,"message":"82","line":3,"column":8,"nodeType":"78","messageId":"79","endLine":3,"endColumn":13},{"ruleId":"76","severity":1,"message":"83","line":4,"column":8,"nodeType":"78","messageId":"79","endLine":4,"endColumn":16},{"ruleId":"76","severity":1,"message":"84","line":7,"column":10,"nodeType":"78","messageId":"79","endLine":7,"endColumn":17},{"ruleId":"76","severity":1,"message":"85","line":8,"column":8,"nodeType":"78","messageId":"79","endLine":8,"endColumn":22},{"ruleId":"76","severity":1,"message":"86","line":51,"column":7,"nodeType":"78","messageId":"79","endLine":51,"endColumn":32},{"ruleId":"87","severity":1,"message":"88","line":301,"column":9,"nodeType":"89","endLine":301,"endColumn":27},{"ruleId":"76","severity":1,"message":"90","line":382,"column":10,"nodeType":"78","messageId":"79","endLine":382,"endColumn":27},{"ruleId":"76","severity":1,"message":"91","line":7,"column":12,"nodeType":"78","messageId":"79","endLine":7,"endColumn":16},{"ruleId":"76","severity":1,"message":"92","line":7,"column":18,"nodeType":"78","messageId":"79","endLine":7,"endColumn":25},{"ruleId":"72","replacedBy":"93"},{"ruleId":"74","replacedBy":"94"},{"ruleId":"76","severity":1,"message":"95","line":2,"column":8,"nodeType":"78","messageId":"79","endLine":2,"endColumn":16},{"ruleId":"76","severity":1,"message":"96","line":4,"column":8,"nodeType":"78","messageId":"79","endLine":4,"endColumn":14},{"ruleId":"76","severity":1,"message":"97","line":6,"column":7,"nodeType":"78","messageId":"79","endLine":6,"endColumn":24},{"ruleId":"98","severity":1,"message":"99","line":17,"column":20,"nodeType":"100","endLine":17,"endColumn":102},{"ruleId":"98","severity":1,"message":"99","line":22,"column":20,"nodeType":"100","endLine":22,"endColumn":106},{"ruleId":"98","severity":1,"message":"99","line":27,"column":20,"nodeType":"100","endLine":27,"endColumn":106},{"ruleId":"98","severity":1,"message":"99","line":32,"column":20,"nodeType":"100","endLine":32,"endColumn":106},{"ruleId":"98","severity":1,"message":"99","line":37,"column":20,"nodeType":"100","endLine":37,"endColumn":106},{"ruleId":"76","severity":1,"message":"77","line":1,"column":17,"nodeType":"78","messageId":"79","endLine":1,"endColumn":26},{"ruleId":"76","severity":1,"message":"101","line":2,"column":10,"nodeType":"78","messageId":"79","endLine":2,"endColumn":16},{"ruleId":"76","severity":1,"message":"81","line":3,"column":30,"nodeType":"78","messageId":"79","endLine":3,"endColumn":34},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'createRef' is defined but never used.","'Text' is defined but never used.","'Konva' is defined but never used.","'roadCone' is defined but never used.","'FaImage' is defined but never used.","'ImageContainer' is defined but never used.","'STANDARD_RECTANGLE_DELETE' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'toolbarAttributes' is assigned a value but never used.","'show' is assigned a value but never used.","'setShow' is assigned a value but never used.",["102"],["103"],"'ReactDOM' is defined but never used.","'Hazard' is defined but never used.","'initialHazardList' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'render' is defined but never used.","no-global-assign","no-unsafe-negation"]